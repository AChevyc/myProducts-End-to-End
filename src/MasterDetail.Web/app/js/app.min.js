define(["services/routeResolver"],function(){var t=angular.module("myApp",["ngRoute","ngTouch","ngAnimate","$strap.directives","ui.bootstrap","kendo.directives","tt.SignalR","tt.Authentication","ngCookies","pascalprecht.translate","routeResolverServices","ng-scrollable"]),n;return t.config(["$routeProvider","$locationProvider","$translateProvider","$httpProvider","routeResolverProvider","$controllerProvider","$compileProvider","$filterProvider","$provide",function(i,r,u,f,e,o,s,h,c){ttTools.initLogger(ttTools.baseUrl+"api/log"),ttTools.logger.info("Configuring myApp..."),t.register={controller:o.register,directive:s.directive,filter:h.register,factory:c.factory,service:c.service},e.routeConfig.setBaseDirectories("app/views/","app/js/controllers/"),i.when("/info",{templateUrl:"app/views/info.html",controller:"InfoController"}).when("/login",{templateUrl:"app/views/login.html",controller:"LoginController"}),c.factory("$routeProviderService",function(){return i}),c.factory("routeResolverProviderService",function(){return e}),u.translations("de",tt.translations.de),u.useStaticFilesLoader({prefix:"app/translations/locale-",suffix:".json"}),u.preferredLanguage("de"),u.useLocalStorage(),f.responseInterceptors.push("loadingIndicatorInterceptor");var l=function(t){var i=document.getElementById("spinner");return n.spin(i),t};f.defaults.transformRequest.push(l)}]),t.run(["$http","$templateCache","$rootScope","$location","$translate","alertService","dialogService","$route","$routeProviderService","routeResolverProviderService",function(t,i,r,u,f,e,o,s,h,c){var a=c.routeConfig.getViewsDirectory(),l;t.get(a+"info.html",{cache:i}),r.$on(tt.authentication.constants.loggedIn,function(){t({method:"GET",url:ttTools.baseUrl+"api/personalization"}).success(function(t){n.spin(document.getElementById("spinner")),tt.personalization.data=t;var i=c.route;angular.forEach(t.Features,function(n){h.when(n.Url,i.resolve(n.Module))}),r.$broadcast(tt.personalization.constants.dataLoaded),s.reload(),n.stop()})}),window.applicationCache.addEventListener("updateready",function(){window.applicationCache.status==window.applicationCache.UPDATEREADY?(console.log("CACHE: Browser downloaded a new app cache manifest."),window.applicationCache.swapCache(),r.$apply(o.showModalDialog({},{headerText:"App Update",bodyText:f("APP_UPDATE_BODY"),closeButtonText:f("COMMON_NO"),actionButtonText:f("COMMON_YES"),callback:function(){window.location.reload(),console.log("CACHE: App will be updated...")}}))):console.log("CACHE: Manifest didn't change.")},!1),l=XMLHttpRequest.prototype.open,XMLHttpRequest.prototype.open=function(t,i,r,u,f){i.indexOf("/signalr")===-1&&this.addEventListener("readystatechange",function(){this.readyState===1&&n.spin(document.getElementById("spinner")),this.readyState===4&&n.stop()},!1),l.call(this,t,i,r,u,f)},r.$on("$locationChangeStart",function(){r.tt.authentication.userLoggedIn||r.$broadcast(tt.authentication.constants.authenticationRequired)}),r.$on(tt.authentication.constants.authenticationRequired,function(){u.path("/login")}),r.$on(tt.authentication.constants.loginConfirmed,function(){u.path("/")}),r.$on(tt.authentication.constants.loginFailed,function(){u.path("/login"),e.pop({title:"Login",body:f("LOGIN_FAILED"),type:"error"})}),r.$on(tt.authentication.constants.logoutConfirmed,function(){u.path("/login")})}]),t.factory("loadingIndicatorInterceptor",function(t){return function(i){return i.then(function(t){return n.stop(),t},function(i){return n.stop(),t.reject(i)})}}),n=new Spinner({lines:12,length:20,width:2,radius:10,color:"#000",speed:1,trail:100,shadow:!0,top:"auto",left:"auto"}),t});
//# sourceMappingURL=app.min.js.map